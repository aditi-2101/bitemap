// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  password,
  email,
  profile_picture,
  biography
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING user_id, username, password, profile_picture, biography, email, created_at
`

type CreateUserParams struct {
	Username       *string `json:"username"`
	Password       *string `json:"password"`
	Email          *string `json:"email"`
	ProfilePicture *string `json:"profile_picture"`
	Biography      *string `json:"biography"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.ProfilePicture,
		arg.Biography,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.ProfilePicture,
		&i.Biography,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, password, profile_picture, biography, email, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username *string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.ProfilePicture,
		&i.Biography,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
