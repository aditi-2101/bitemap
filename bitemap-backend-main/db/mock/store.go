// Code generated by MockGen. DO NOT EDIT.
// Source: bitemap/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	db "bitemap/db/sqlc"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddReview mocks base method.
func (m *MockStore) AddReview(arg0 context.Context, arg1 db.AddReviewParams) (db.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", arg0, arg1)
	ret0, _ := ret[0].(db.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReview indicates an expected call of AddReview.
func (mr *MockStoreMockRecorder) AddReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockStore)(nil).AddReview), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// GetRestaurantCuisines mocks base method.
func (m *MockStore) GetRestaurantCuisines(arg0 context.Context, arg1 db.GetRestaurantCuisinesParams) ([]*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurantCuisines", arg0, arg1)
	ret0, _ := ret[0].([]*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurantCuisines indicates an expected call of GetRestaurantCuisines.
func (mr *MockStoreMockRecorder) GetRestaurantCuisines(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurantCuisines", reflect.TypeOf((*MockStore)(nil).GetRestaurantCuisines), arg0, arg1)
}

// GetRestaurants mocks base method.
func (m *MockStore) GetRestaurants(arg0 context.Context, arg1 db.GetRestaurantsParams) ([]db.GetRestaurantsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurants", arg0, arg1)
	ret0, _ := ret[0].([]db.GetRestaurantsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurants indicates an expected call of GetRestaurants.
func (mr *MockStoreMockRecorder) GetRestaurants(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurants", reflect.TypeOf((*MockStore)(nil).GetRestaurants), arg0, arg1)
}

// GetRestaurantsByFilter mocks base method.
func (m *MockStore) GetRestaurantsByFilter(arg0 context.Context, arg1 db.GetRestaurantsByFilterParams) ([]db.GetRestaurantsByFilterRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurantsByFilter", arg0, arg1)
	ret0, _ := ret[0].([]db.GetRestaurantsByFilterRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurantsByFilter indicates an expected call of GetRestaurantsByFilter.
func (mr *MockStoreMockRecorder) GetRestaurantsByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurantsByFilter", reflect.TypeOf((*MockStore)(nil).GetRestaurantsByFilter), arg0, arg1)
}

// GetReviews mocks base method.
func (m *MockStore) GetReviews(arg0 context.Context, arg1 int32) ([]db.GetReviewsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviews", arg0, arg1)
	ret0, _ := ret[0].([]db.GetReviewsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviews indicates an expected call of GetReviews.
func (mr *MockStoreMockRecorder) GetReviews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviews", reflect.TypeOf((*MockStore)(nil).GetReviews), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 *string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// UpdateRating mocks base method.
func (m *MockStore) UpdateRating(arg0 context.Context, arg1 db.UpdateRatingParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRating", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRating indicates an expected call of UpdateRating.
func (mr *MockStoreMockRecorder) UpdateRating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRating", reflect.TypeOf((*MockStore)(nil).UpdateRating), arg0, arg1)
}
